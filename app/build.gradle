/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation "org.jetbrains.kotlinx:kotlinx-cli:0.3.4"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

application {
    // Define the main class for the application.
    mainClass = 'pixel.safe.kt.AppKt'
}

version = '1.0'

task fatJar(type: Jar) {
    description = "Packages a complete JAR file"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Implementation-Title': 'Encrypt files into images and back again',
                'Implementation-Version': version,
                'Main-Class': 'pixel.safe.kt.AppKt'
    }
    baseName = project.name + ''
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//jar {
//    manifest {
//        attributes 'Main-Class': 'pixel.safe.kt.AppKt'
//    }
//
//    // This line of code recursively collects and copies all of a project's files
//    // and adds them to the JAR itself. One can extend this task, to skip certain
//    // files or particular types at will
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//}

task copyJar(type: Copy) {
    println 'COPY TASKS'
    description = "Copy the created JAR file from /build/libs/ to /example/"
    from file("${buildDir}/libs/${project.name}-${version}.jar")
    into file("${project.rootDir}/example")
//    into file("example")
    doLast {

        println 'COPY TASKS LAST'
    }
}

task superBuild(dependsOn: ['clean', 'build', 'fatJar', 'copyJar']){
    description = "Cleans, Builds and creates a complete release JAR file"
    build.mustRunAfter clean
    fatJar.mustRunAfter build
    copyJar.mustRunAfter fatJar
}
